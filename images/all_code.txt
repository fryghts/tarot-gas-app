===== data.js =====

// Данные карт таро
const tarotCards = [
    {
        id: 0,
        name: "Дурак (Шут)",
        general: "Начало нового пути, смелый шаг в неизвестность.",
        project: "Время для запуска MVP, экспериментов, пилотных проектов. Не бойтесь выйти за рамки привычного, даже если нет полной картины. Ваша наивная вера может привести к прорыву.",
        career: "Возможность для перехода в новую сферу, освоения радикально иной технологии или старта собственного дела. Отпустите страх и доверьтесь процессу обучения.",
        keywords: "Стартап, MVP, эксперимент, 'Hello World', новая технология, первый шаг, риск.",
        image: "images/0.jpg"
    },
    {
        id: 1,
        name: "Маг",
        general: "Мастерство, инициатива, использование всех доступных ресурсов.",
        project: "У вас есть все необходимые навыки и инструменты, чтобы воплотить идею в жизнь. Время для активных действий, написания кода, построения архитектуры. Не ждите, творите!",
        career: "Используйте свои знания и опыт на полную катушку. Вы обладаете уникальными навыками, чтобы проявлять инициативу и создавать что-то значимое. Возможно, это период для менторства или ведения ключевого проекта.",
        keywords: "Программирование, архитектура, инструменты, API, мастерство, инициатива, создание.",
        image: "images/1.jpg"
    },
    {
        id: 2,
        name: "Жрица",
        general: "Интуиция, скрытые знания, глубокий анализ данных.",
        project: "Ищите неочевидные решения, доверьтесь своей интуиции при анализе данных. Возможно, ключ к успеху лежит в глубоком исследовании пользовательского поведения или скрытых уязвимостей. Не все ответы лежат на поверхности.",
        career: "Развивайте навыки в области Big Data, AI, кибербезопасности. Ваша способность видеть закономерности там, где другие видят хаос, будет востребована. Время для глубокого обучения и погружения в сложные концепции.",
        keywords: "Big Data, AI, интуиция, кибербезопасность, скрытые угрозы, аналитика, нейронные сети.",
        image: "images/2.jpg"
    },
    {
        id: 3,
        name: "Императрица",
        general: "Творчество, развитие продукта, пользовательский опыт, плодородие и рост.",
        project: "Сосредоточьтесь на удобстве и привлекательности продукта. Создавайте что-то, что приносит радость и легкость пользователям. Время для итераций, прототипирования и внедрения новых фич, которые по-настоящему 'кормят' продукт.",
        career: "Развивайте свои творческие навыки в дизайне, продуктовой разработке, маркетинге. Вы способны создавать продукты, которые не просто работают, но и приносят удовольствие.",
        keywords: "UX/UI, продуктовая разработка, масштабирование, рост, плодородие, пользователь, фичи.",
        image: "images/3.jpg"
    },
    {
        id: 4,
        name: "Император",
        general: "Структура, лидерство, управление, порядок и стабильность.",
        project: "Настало время для упорядочивания, внедрения четких процессов, стандартов кодирования и архитектурных принципов. Требуется сильное лидерство и контроль над ресурсами, чтобы обеспечить стабильность и управляемость.",
        career: "Выход на руководящую позицию, возможность создать или реорганизовать команду, навести порядок в хаотичном проекте. Ваша задача — быть опорой и принимать ответственные решения.",
        keywords: "CTO, CEO, архитектура, инфраструктура, управление, процессы, стандарты, контроль.",
        image: "images/4.jpg"
    },
    {
        id: 5,
        name: "Иерофант (Первосвященник)",
        general: "Обучение, менторство, лучшие практики, устоявшиеся традиции.",
        project: "Время для следования лучшим практикам, изучения и применения проверенных временем подходов. Возможно, нужно привлечь опытного консультанта или начать внутренние тренинги для команды.",
        career: "Если вы опытный специалист, это призыв к менторству и обмену знаниями. Если вы новичок, ищите наставника, вступайте в профессиональные сообщества, изучайте документацию.",
        keywords: "Менторство, опенсорс, обучение, best practices, документация, сообщество, традиции.",
        image: "images/5.jpg"
    },
    {
        id: 6,
        name: "Влюблённые (Выбор)",
        general: "Выбор, отношения, сотрудничество, этические дилеммы.",
        project: "Стоит важный выбор, который повлияет на дальнейшее развитие. Это может быть выбор технологического стека, партнера, или решение между 'быстро и плохо' и 'медленно, но качественно'. Также акцент на командной работе и разрешении конфликтов.",
        career: "Выбор новой специализации, компании, или решение о совместном проекте. Возможно, нужно урегулировать разногласия в команде или принять сложное этическое решение (например, в области ИИ).",
        keywords: "Выбор стека, build vs buy, командная работа, этика ИИ, слияние веток, компромисс.",
        image: "images/6.jpg"
    },
    {
        id: 7,
        name: "Колесница",
        general: "Прогресс, контроль, победа, решимость, преодоление препятствий.",
        project: "Проект набирает обороты и движется к релизу или важной вехе. Вы контролируете ситуацию, несмотря на препятствия. Время для форсирования темпов, но с сохранением контроля над качеством.",
        career: "Вы успешно продвигаетесь к цели, преодолевая трудности. Это может быть успешное завершение сложного проекта, получение новой должности или быстрое освоение новой технологии.",
        keywords: "Деплой, релиз, CI/CD, масштабирование, прогресс, преодоление, успех.",
        image: "images/7.jpg"
    },
    {
        id: 8,
        name: "Справедливость (Правосудие)",
        general: "Оценка, тестирование, честность, качество кода, последствия.",
        project: "Время для тщательного тестирования, аудита кода, рефакторинга и обеспечения высокого качества. Важно быть честным в оценке проблем и принимать справедливые решения. Возможно, придется столкнуться с последствиями прошлых ошибок.",
        career: "Ваша работа будет оцениваться по достоинству. Сосредоточьтесь на создании качественных решений, будьте объективны в оценке себя и других. Возможно, вы будете вовлечены в процессы Code Review или архитектурные комиссии.",
        keywords: "QA, тестирование, баги, code review, аудит, чистый код, ответственность, качество.",
        image: "images/8.jpg"
    },
    {
        id: 9,
        name: "Отшельник",
        general: "Глубокая работа, самоанализ, поиск истины, ментальная фокусировка.",
        project: "Необходимо углубиться в проблему, провести тщательное исследование или разработать сложное решение в уединении. Отвлечения будут мешать.",
        career: "Время для глубокого изучения новой технологии, написания диссертации или сосредоточенной работы над личным проектом. Ищите внутренний ответ, а не внешний.",
        keywords: "Отладка, ресерч, глубокая работа, алгоритмы, уединение, фокус, Computer Science.",
        image: "images/9.jpg"
    },
    {
        id: 10,
        name: "Колесо Фортуны (Зеркало)",
        general: "Перемены, циклы, возможности, неожиданные события в мире IT.",
        project: "Будьте готовы к быстрым изменениям на рынке или в технологической среде. Могут появиться новые возможности или неожиданные вызовы. Адаптируйтесь к циклам 'хайпа' и 'спадов'.",
        career: "Рынок труда в IT постоянно меняется. Будьте гибкими, осваивайте новые тренды. Неожиданные предложения или изменения в компании могут стать поворотными моментами.",
        keywords: "Тренды, хайп, циклы, адаптация, рынок IT, удача, изменения.",
        image: "images/10.jpg"
    },
    {
        id: 11,
        name: "Сила",
        general: "Внутренняя сила, терпение, управление сложными системами, устойчивость.",
        project: "Требуется терпение и выдержка для работы с крупными, сложными или устаревшими системами. Не грубой силой, а методичным подходом и вниманием к деталям вы сможете справиться с техническим долгом или сложными интеграциями.",
        career: "Развивайте навыки управления проектами, людьми или очень сложными техническими задачами. Вы обладаете внутренней стойкостью, чтобы довести дело до конца, даже если оно кажется неподъемным.",
        keywords: "Legacy-код, технический долг, управление проектами, терпение, рефакторинг, стойкость.",
        image: "images/11.jpg"
    },
    {
        id: 12,
        name: "Повешенный",
        general: "Пересмотр, новая перспектива, жертва для большей цели, приостановка.",
        project: "Возможно, проект зашел в тупик, и нужно полностью переосмыслить подход. Пауза, отказ от текущих методов, или даже временная заморозка для редизайна могут быть необходимы.",
        career: "Время для переосмысления карьерного пути, возможен 'саббатикал' или временное переключение на фриланс, чтобы набраться новых идей. Отпустите старые представления, чтобы увидеть новые возможности.",
        keywords: "Перезагрузка, рефакторинг, редизайн, новая перспектива, пауза, стратегический отказ.",
        image: "images/12.jpg"
    },
    {
        id: 13,
        name: "Смерть",
        general: "Окончание, трансформация, обновление, избавление от устаревшего.",
        project: "Пришло время полностью отказаться от устаревших технологий, прекратить поддержку неэффективных решений или провести полную миграцию. Это болезненно, но необходимо для роста.",
        career: "Возможно, вам придется покинуть старую компанию, сменить специализацию или отказаться от привычных, но уже неактуальных навыков. Не бойтесь перемен, они ведут к обновлению.",
        keywords: "Миграция, декоммиссия, EOL, устаревание, трансформация, новая эра.",
        image: "images/13.jpg"
    },
    {
        id: 14,
        name: "Умеренность (Время)",
        general: "Баланс, гармония, интеграция, оптимизация, терпение.",
        project: "Важно найти баланс между скоростью разработки и стабильностью операций. Оптимизируйте процессы, наладьте взаимодействие между командами, сосредоточьтесь на бесшовной интеграции и непрерывной поставке.",
        career: "Ищите баланс между работой и личной жизнью, между глубокой специализацией и широким кругозором. Учитесь эффективно совмещать различные подходы и технологии.",
        keywords: "DevOps, CI/CD, баланс, интеграция, оптимизация, межкомандное взаимодействие, гармония.",
        image: "images/14.jpg"
    },
    {
        id: 15,
        name: "Дьявол",
        general: "Технический долг, зависимости, искушения, выгорание, ложные обещания.",
        project: "Остерегайтесь 'быстрых, грязных' решений, которые ведут к техническому долгу. Избегайте вендор-лока и зависимости от ненадежных решений. Будьте внимательны к признакам выгорания в команде.",
        career: "Остерегайтесь токсичных проектов или компаний, которые обещают многое, но эксплуатируют. Не позволяйте работе поглотить вас полностью. Боритесь с прокрастинацией и ложными мотивами.",
        keywords: "Технический долг, вендор-лок, выгорание, прокрастинация, зависимость, баги, ложные обещания.",
        image: "images/15.jpg"
    },
    {
        id: 16,
        name: "Башня",
        general: "Внезапный крах, кризис, перелом, разрушение старых структур.",
        project: "Будьте готовы к внезапному системному сбою, критическому багу в продакшене или даже полному провалу проекта. Это разрушительное, но очищающее событие, требующее немедленной реакции и перестройки.",
        career: "Неожиданное увольнение, провал важного экзамена или проекта. Это может быть шоком, но также и возможностью для полного переосмысления и построения чего-то более прочного.",
        keywords: "Downtime, 500 Error, сбой, критический баг, кризис, разрушение, перезапуск.",
        image: "images/16.jpg"
    },
    {
        id: 17,
        name: "Звезда",
        general: "Надежда, вдохновение, инновации, новые горизонты, открытость.",
        project: "Появляются новые, вдохновляющие идеи и возможности. Время для инноваций, исследования прорывных технологий (AI, Web3, квантовые вычисления). Делитесь своими знаниями и вдохновляйте других.",
        career: "Выход на новый уровень в карьере, осознание своего предназначения в IT, возможность стать частью чего-то большого и значимого. Найдите свою путеводную звезду в технологиях.",
        keywords: "Инновации, прорывные технологии, AI, Web3, вдохновение, опенсорс, надежда, будущее.",
        image: "images/17.jpg"
    },
    {
        id: 18,
        name: "Луна",
        general: "Неопределенность, скрытые угрозы, заблуждения, интуиция, непонимание.",
        project: "Есть скрытые проблемы, неочевидные баги или уязвимости, которые еще не проявились. Будьте осторожны с неясными требованиями или непроверенными решениями. Доверяйте интуиции, но перепроверяйте.",
        career: "Чувство неопределенности, синдром самозванца, неясные перспективы. Не доверяйте всему, что видите или слышите. Углубитесь в самоанализ и найдите истину за туманом сомнений.",
        keywords: "Неопределенность, скрытые баги, уязвимости, фрод, киберпреступность, синдром самозванца, туман требований.",
        image: "images/18.jpg"
    },
    {
        id: 19,
        name: "Солнце",
        general: "Успех, ясность, радость, процветание, признание.",
        project: "Полный успех, успешный запуск, признание сообществом, ясное понимание всех аспектов. Время праздновать достижения и наслаждаться результатом.",
        career: "Признание ваших заслуг, повышение, успешное завершение важного этапа. Вы достигли ясности в своих целях и путях.",
        keywords: "Успешный релиз, ясность, признание, процветание, growth, свет, позитив.",
        image: "images/19.jpg"
    },
    {
        id: 20,
        name: "Страшный суд",
        general: "Оценка, возрождение, призыв, окончательное решение, ретроспектива.",
        project: "Время для глубокой ретроспективы, анализа всех ошибок и успехов. Важно извлечь уроки и принять кардинальные решения о дальнейшем развитии или закрытии проекта. Это призыв к обновлению и перерождению.",
        career: "Период для самооценки, анализа пройденного пути и принятия важных решений о смене направления, переходе на новый уровень или возвращении к старым проектам с новым видением.",
        keywords: "Ретроспектива, постмортем, аудит, переосмысление, возрождение, кардинальные решения.",
        image: "images/20.jpg"
    },
    {
        id: 21,
        name: "Мир",
        general: "Завершение, интеграция, глобальный успех, целостность, мастерство.",
        project: "Проект достиг полной функциональности, интегрирован во все необходимые системы и готов к глобальному масштабированию. Это кульминация усилий, принесшая целостный и завершенный продукт.",
        career: "Вы достигли мастерства в своей области, реализовали свой потенциал. Возможно, это достижение глобального признания, завершение долгого обучения или успешное построение собственной IT-империи.",
        keywords: "Глобализация, завершение, успех, масштабирование, интеграция, мастерство, Web 3.0, мир.",
        image: "images/21.jpg"
    }
];

===== index.html =====

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Таро — IT-предсказания</title>
  <link rel="stylesheet" href="style.css" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <div class="container">
    <canvas id="flow-bg" aria-hidden="true"></canvas>

    <!-- Welcome -->
    <div id="welcome-screen" class="screen active">
      <div class="topbar">
        <div class="emblem" aria-hidden="true">
          <svg width="56" height="56" viewBox="0 0 86 86" xmlns="http://www.w3.org/2000/svg">
            <defs><linearGradient id="g_logo" x1="0" x2="1"><stop offset="0" stop-color="#00a2e1"/><stop offset="1" stop-color="#008cc7"/></linearGradient></defs>
            <circle cx="43" cy="43" r="40" fill="url(#g_logo)"/>
            <path d="M22 54 L43 22 L64 54 Z" fill="rgba(255,255,255,0.95)"/>
          </svg>
        </div>
        <div class="controls">
          <button id="autoplay-welcome" class="btn small">Автопоказ</button>
        </div>
      </div>

      <div class="welcome-content">
        <h1>Раскройте тайну вашего энергетического будущего</h1>
        <p>Нажмите «Выбрать карту». На экране выбора — лента карт, движущаяся справа налево.</p>
        <div class="welcome-actions">
          <button id="start-btn" class="btn">Выбрать карту</button>
        </div>
      </div>

      <div id="attract-overlay" class="attract-overlay hidden" aria-hidden="true">
        <div id="attract-card" class="attract-card">
          <div class="card-inner">
            <div class="card-front"><img src="images/back.jpg" alt="рубашка"></div>
            <div class="card-back"><img id="attract-image" src="" alt=""></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Selection / tape -->
    <div id="selection-screen" class="screen">
      <div class="topbar">
        <div class="emblem" aria-hidden="true">
          <svg width="46" height="46" viewBox="0 0 86 86" xmlns="http://www.w3.org/2000/svg">
            <defs><linearGradient id="g_logo2" x1="0" x2="1"><stop offset="0" stop-color="#00a2e1"/><stop offset="1" stop-color="#008cc7"/></linearGradient></defs>
            <circle cx="43" cy="43" r="40" fill="url(#g_logo2)"/>
            <path d="M22 54 L43 22 L64 54 Z" fill="rgba(255,255,255,0.95)"/>
          </svg>
        </div>
        <div class="controls">
          <button id="back-btn" class="btn-ghost small">Назад</button>
        </div>
      </div>

      <div class="tape-viewport">
        <div id="tape" class="tape"></div>
      </div>

      <!-- detail panel (text-only) -->
      <aside id="detail-panel" class="detail-panel hidden" aria-hidden="true">
        <button id="close-detail" class="btn-ghost small">✕</button>
        <div class="detail-content-only">
          <h3 id="detail-title"></h3>
          <div class="meaning-section"><h4>Общее значение</h4><p id="detail-general"></p></div>
          <div class="meaning-section"><h4>Для проекта</h4><p id="detail-project"></p></div>
          <div class="meaning-section"><h4>Для карьеры</h4><p id="detail-career"></p></div>
          <div class="meaning-section"><h4>Ключевые слова</h4><p id="detail-keywords"></p></div>
        </div>
      </aside>
    </div>
  </div>

  <script src="data.js"></script>
  <script src="script.js"></script>
</body>
</html>


===== script.js =====

// script.js — исправлённая версия (убрана дублирующая декларация paused)

/* ---------- DOM ---------- */
const welcomeScreen = document.getElementById('welcome-screen');
const selectionScreen = document.getElementById('selection-screen');
const startBtn = document.getElementById('start-btn');
const backBtn = document.getElementById('back-btn');
const autoplayWelcomeBtn = document.getElementById('autoplay-welcome');

const tapeEl = document.getElementById('tape');
const detailPanel = document.getElementById('detail-panel');
const closeDetailBtn = document.getElementById('close-detail');
const detailTitle = document.getElementById('detail-title');
const detailGeneral = document.getElementById('detail-general');
const detailProject = document.getElementById('detail-project');
const detailCareer = document.getElementById('detail-career');
const detailKeywords = document.getElementById('detail-keywords');

const attractOverlay = document.getElementById('attract-overlay');
const attractCard = document.getElementById('attract-card');
const attractImage = document.getElementById('attract-image');

/* ---------- State & params ---------- */
let tapeItems = [];
let rafId = null;
let lastTime = null;
// paused declared once here
let paused = false;

let tapeSpeed = 160;     // px/sec — скорость ленты
let gap = 12;            // расстояние между картами (меньше -> плотнее)
let thumbWidth = 160;
let thumbHeight = 220;

let welcomeAutoplay = false;
let welcomeInterval = null;

let animWrapper = null; // wrapper with flip

/* ---------- Helpers ---------- */
const px = v => `${Math.round(v)}px`;

/* ---------- Preload ---------- */
function preloadImages(){
  if (!Array.isArray(tarotCards)) return;
  tarotCards.forEach(c=> { const i=new Image(); i.src=c.image; });
  const back = new Image(); back.src = 'images/back.jpg';
}
window.addEventListener('load', preloadImages);

/* ---------- Navigation ---------- */
startBtn && startBtn.addEventListener('click', () => {
  welcomeScreen.classList.remove('active');
  selectionScreen.classList.add('active');
  buildTape();
  startLoop();
});
backBtn && backBtn.addEventListener('click', () => {
  stopLoop();
  selectionScreen.classList.remove('active');
  welcomeScreen.classList.add('active');
  stopWelcomeAutoplay();
});

/* ---------- Welcome autoplay ---------- */
autoplayWelcomeBtn && autoplayWelcomeBtn.addEventListener('click', () => {
  welcomeAutoplay = !welcomeAutoplay;
  autoplayWelcomeBtn.textContent = welcomeAutoplay ? 'Остановить автопоказ' : 'Автопоказ';
  if (welcomeAutoplay) startWelcomeAutoplay(); else stopWelcomeAutoplay();
});
function startWelcomeAutoplay(){
  stopWelcomeAutoplay();
  attractOverlay.classList.remove('hidden'); attractOverlay.classList.add('visible');
  showAttractCardOnce();
  welcomeInterval = setInterval(showAttractCardOnce, 4200);
}
function stopWelcomeAutoplay(){
  attractOverlay.classList.remove('visible'); attractOverlay.classList.add('hidden');
  if (welcomeInterval){ clearInterval(welcomeInterval); welcomeInterval = null; }
}
function showAttractCardOnce(){
  if (!Array.isArray(tarotCards) || !tarotCards.length) return;
  const idx = Math.floor(Math.random()*tarotCards.length);
  attractImage.src = tarotCards[idx].image;
  const node = attractCard;
  node.style.transition = 'none';
  node.style.transform = 'translateY(30vh) scale(.6)';
  node.classList.remove('flipped');
  requestAnimationFrame(()=>{
    node.style.transition = 'transform .8s cubic-bezier(.2,.9,.2,1)';
    node.style.transform = 'translateY(0) scale(1)';
    setTimeout(()=> { node.classList.add('flipped'); node.querySelector('.card-inner').style.transform = 'rotateY(180deg)'; }, 700);
    setTimeout(()=> { node.style.transform = 'translateY(-30vh) scale(.5)'; node.classList.remove('flipped'); node.querySelector('.card-inner').style.transform = ''; }, 3200);
  });
}

/* ---------- Build tape (dense) ---------- */
function buildTape(){
  stopLoop();
  tapeEl.innerHTML = '';
  tapeItems = [];

  // measure thumb
  const tmp = document.createElement('div');
  tmp.className = 'thumb';
  tmp.style.visibility = 'hidden';
  tmp.innerHTML = `<div class="card"><img src="images/back.jpg" alt=""></div>`;
  document.body.appendChild(tmp);
  const r = tmp.getBoundingClientRect();
  if (r.width > 16){ thumbWidth = r.width; thumbHeight = r.height; }
  tmp.remove();

  // spacing and desired count so many cards visible
  const spacing = thumbWidth + gap;
  const desiredCount = Math.max(tarotCards.length, Math.ceil(window.innerWidth / spacing) + 6);

  // center the strip so many items are visible across viewport
  const startX = -Math.floor(desiredCount/2) * spacing;

  for (let i=0;i<desiredCount;i++){
    const idx = i % tarotCards.length;
    const x = startX + i * spacing;
    const it = createTapeItem(idx, x);
    tapeItems.push(it);
    tapeEl.appendChild(it.el);
  }
}

/* create tape item */
function createTapeItem(index, x){
  const el = document.createElement('div');
  el.className = 'thumb';
  el.dataset.index = index;
  el.style.left = '0';
  el.style.top = '50%';
  el.style.transform = `translate(${px(x)}, -50%)`;

  const card = document.createElement('div');
  card.className = 'card';
  card.innerHTML = `<div class="card-front"><img src="images/back.jpg" alt=""></div>
                    <div class="card-back"><img src="${tarotCards[index].image}" alt=""></div>`;
  el.appendChild(card);

  const state = { el, index, x };

  el.addEventListener('click', (e)=> {
    e.stopPropagation();
    if (!paused) openDetailFromItem(state);
  });

  el.addEventListener('pointermove', (ev)=>{
    const inner = el.querySelector('.card');
    const rc = el.getBoundingClientRect();
    const dx = (ev.clientX - (rc.left + rc.width/2)) / (rc.width/2);
    const dy = (ev.clientY - (rc.top + rc.height/2)) / (rc.height/2);
    inner.style.transform = `rotateX(${(-dy*6).toFixed(2)}deg) rotateY(${(dx*8).toFixed(2)}deg)`;
  });
  el.addEventListener('pointerleave', ()=> { el.querySelector('.card').style.transform = ''; });

  return state;
}

/* ---------- Loop (RAF) ---------- */
function startLoop(){
  if (!rafId){ lastTime = performance.now(); rafId = requestAnimationFrame(loop); }
}
function stopLoop(){ if (rafId){ cancelAnimationFrame(rafId); rafId = null; lastTime = null; } }

function loop(now){
  if (!lastTime) lastTime = now;
  const dt = Math.min(60, now - lastTime);
  lastTime = now;

  if (!paused && tapeItems.length){
    const move = tapeSpeed * (dt/1000);
    for (let it of tapeItems) it.x -= move;

    // wraps
    for (let it of tapeItems){
      if (it.x < - (thumbWidth + 300)){
        // place to rightmost
        let maxX = -Infinity;
        for (let j=0;j<tapeItems.length;j++) maxX = Math.max(maxX, tapeItems[j].x);
        it.x = maxX + thumbWidth + gap;
      }
      it.el.style.transform = `translate(${px(it.x)}, -50%)`;
    }
  }

  rafId = requestAnimationFrame(loop);
}

/* ---------- Open detail: animate to slightly right of center -> THEN flip -> show panel aligned ---------- */
function openDetailFromItem(item){
  paused = true;

  const origImgEl = item.el.querySelector('.card-back img');
  const src = origImgEl ? origImgEl.src : tarotCards[item.index].image;
  const rect = item.el.getBoundingClientRect();

  // dim original
  item.el.style.opacity = '0.08';
  item.el.style.pointerEvents = 'none';

  // create clone image
  const clone = document.createElement('img');
  clone.src = src;
  clone.style.position = 'fixed';
  clone.style.left = px(rect.left);
  clone.style.top = px(rect.top);
  clone.style.width = px(rect.width);
  clone.style.height = px(rect.height);
  clone.style.borderRadius = getComputedStyle(item.el.querySelector('.card')).borderRadius || '12px';
  clone.style.zIndex = 2200;
  clone.style.boxShadow = '0 48px 140px rgba(0,0,0,0.7)';
  clone.style.transition = 'all .52s cubic-bezier(.2,.9,.2,1)';
  document.body.appendChild(clone);

  // target: slightly right of center, vertical center exact
  const targetWidth = Math.min(window.innerWidth * 0.34, 420);
  const targetHeight = Math.round(targetWidth * (rect.height / rect.width));
  const centerX = Math.round(window.innerWidth / 2 - targetWidth/2);
  const offsetRight = Math.round(Math.min(160, window.innerWidth * 0.08));
  const targetX = centerX + offsetRight;
  const targetY = Math.round(window.innerHeight / 2 - targetHeight/2);

  // move clone to target pos (center-right)
  requestAnimationFrame(()=> {
    clone.style.left = px(targetX);
    clone.style.top = px(targetY);
    clone.style.width = px(targetWidth);
    clone.style.height = px(targetHeight);
  });

  // when move finished -> replace clone with anim wrapper and flip
  const onMoveEnd = () => {
    clone.removeEventListener('transitionend', onMoveEnd);

    const wrapper = document.createElement('div');
    wrapper.className = 'anim-wrapper';
    wrapper.style.position = 'fixed';
    wrapper.style.left = clone.style.left;
    wrapper.style.top = clone.style.top;
    wrapper.style.width = clone.style.width;
    wrapper.style.height = clone.style.height;
    wrapper.style.zIndex = 2300;
    wrapper.style.transformStyle = 'preserve-3d';
    wrapper.style.webkitTransformStyle = 'preserve-3d';
    wrapper.style.transition = 'transform .6s cubic-bezier(.2,.9,.2,1)';
    wrapper.style.perspective = '1200px';

    const front = document.createElement('div');
    front.style.backfaceVisibility = 'hidden';
    front.style.webkitBackfaceVisibility = 'hidden';
    front.style.borderRadius = clone.style.borderRadius;
    front.style.overflow = 'hidden';
    front.innerHTML = `<img src="images/back.jpg" style="width:100%;height:100%;object-fit:cover">`;

    const back = document.createElement('div');
    back.style.backfaceVisibility = 'hidden';
    back.style.webkitBackfaceVisibility = 'hidden';
    back.style.transform = 'rotateY(180deg)';
    back.style.borderRadius = clone.style.borderRadius;
    back.style.overflow = 'hidden';
    back.innerHTML = `<img src="${src}" style="width:100%;height:100%;object-fit:cover">`;

    wrapper.appendChild(front);
    wrapper.appendChild(back);

    clone.remove();
    animWrapper = wrapper;
    document.body.appendChild(wrapper);

    // after tiny delay start flip
    requestAnimationFrame(()=> {
      wrapper.style.transform = 'rotateY(180deg)';
      wrapper.style.webkitTransform = 'rotateY(180deg)';
    });

    // show detail panel next to wrapper, vertically center-matched
    setTimeout(()=> { showPanelAligned(wrapper, item.index); }, 160);
  };

  clone.addEventListener('transitionend', onMoveEnd);
}

/* position text panel adjacent to wrapper and vertically centered */
function showPanelAligned(wrapper, index){
  const wrapRect = wrapper.getBoundingClientRect();
  const panel = detailPanel;

  // populate text
  const card = tarotCards[index];
  detailTitle.textContent = card.name;
  detailGeneral.textContent = card.general;
  detailProject.textContent = card.project;
  detailCareer.textContent = card.career;
  detailKeywords.textContent = card.keywords;

  const gapPanel = 18;
  const panelWidth = Math.min(window.innerWidth * 0.34, 480);

  // try to place to right
  let left = wrapRect.right + gapPanel;
  // if would overflow, place to left
  if (left + panelWidth > window.innerWidth - 12){
    left = wrapRect.left - gapPanel - panelWidth;
  }
  left = Math.max(12, left);

  panel.style.width = px(panelWidth);
  panel.style.left = px(left);
  panel.style.top = '50%';
  panel.style.transform = 'translateY(-50%)';

  panel.classList.remove('hidden');
  panel.classList.add('visible');
  panel.setAttribute('aria-hidden', 'false');
}

/* close detail */
function closeDetail(){
  detailPanel.classList.remove('visible'); detailPanel.classList.add('hidden'); detailPanel.setAttribute('aria-hidden','true');

  // remove wrapper
  if (animWrapper && animWrapper.parentNode) animWrapper.parentNode.removeChild(animWrapper);
  animWrapper = null;

  // restore items
  tapeItems.forEach(it => { it.el.style.opacity = '1'; it.el.style.pointerEvents = ''; });

  paused = false;
}
closeDetailBtn && closeDetailBtn.addEventListener('click', closeDetail);

// click outside panel closes it
document.addEventListener('click', (e)=>{
  if (!detailPanel.classList.contains('visible')) return;
  const path = e.composedPath ? e.composedPath() : (e.path || []);
  if (!path.includes(detailPanel) && !path.some(n => n && n.classList && n.classList.contains && n.classList.contains('anim-wrapper'))) {
    closeDetail();
  }
}, true);

/* update thumb measurement on resize */
window.addEventListener('resize', ()=>{
  const sample = document.querySelector('.tape .thumb');
  if (sample){
    const r = sample.getBoundingClientRect();
    thumbWidth = r.width; thumbHeight = r.height;
  }
});

/* ---------- Canvas background ---------- */
(function setupFlowBg(){
  const canvas = document.getElementById('flow-bg');
  if (!canvas) return;
  const ctx = canvas.getContext('2d');
  let w = innerWidth, h = innerHeight;
  canvas.width = w; canvas.height = h;
  window.addEventListener('resize', ()=>{ w = innerWidth; h = innerHeight; canvas.width = w; canvas.height = h; });

  const particles = [];
  const N = 120;
  for (let i=0;i<N;i++){
    particles.push({
      x: Math.random()*w,
      y: Math.random()*h,
      vx: (Math.random()*2-1) * 0.9,
      vy: -0.2 - Math.random()*0.6,
      size: 1 + Math.random()*4,
      alpha: 0.06 + Math.random()*0.34,
      offset: Math.random()*Math.PI*2,
      phase: 0.002 + Math.random()*0.01
    });
  }

  let t0 = performance.now();
  function draw(now){
    const t = (now - t0) * 0.0014;
    const g = ctx.createLinearGradient(0,0,w,h);
    g.addColorStop(0, 'rgba(0,55,105,0.22)');
    g.addColorStop(0.6, 'rgba(0,40,70,0.12)');
    g.addColorStop(1, 'rgba(0,20,35,0.10)');
    ctx.fillStyle = g;
    ctx.fillRect(0,0,w,h);

    for (let p of particles){
      p.x += p.vx + Math.sin(t * p.phase + p.offset) * 2.2;
      p.y += p.vy;
      if (p.y < -60 || p.x < -100 || p.x > w+100){
        p.x = Math.random()*w;
        p.y = h + Math.random()*80;
        p.vx = (Math.random()*2-1)*0.9;
        p.vy = -0.2 - Math.random()*0.6;
      }

      ctx.beginPath();
      ctx.fillStyle = `rgba(0,162,225,${p.alpha})`;
      ctx.arc(p.x, p.y, p.size, 0, Math.PI*2);
      ctx.fill();

      ctx.beginPath();
      ctx.moveTo(p.x, p.y);
      ctx.lineTo(p.x - p.vx * 10, p.y - p.vy * 10);
      ctx.strokeStyle = `rgba(0,162,225,${p.alpha*0.45})`;
      ctx.lineWidth = Math.max(1, p.size/1.5);
      ctx.stroke();
    }

    const cx = w*0.2 + Math.sin(now*0.0005) * w*0.5;
    const cy = h*0.4 + Math.cos(now*0.00035) * h*0.2;
    const rg = ctx.createRadialGradient(cx,cy,40,cx,cy, Math.max(w,h));
    rg.addColorStop(0, 'rgba(0,160,225,0.08)');
    rg.addColorStop(0.6, 'rgba(0,40,80,0.02)');
    rg.addColorStop(1, 'rgba(0,20,40,0)');
    ctx.fillStyle = rg;
    ctx.fillRect(0,0,w,h);

    requestAnimationFrame(draw);
  }
  requestAnimationFrame(draw);
})();


===== style.css =====

*{margin:0;padding:0;box-sizing:border-box}html,body{height:100%}
body{
  font-family: 'Roboto', sans-serif;
  background:linear-gradient(135deg,#0062a9 0%,#003d7e 100%);
  color:#eaf8ff; overflow:hidden;
}

/* canvas background */
#flow-bg{position:fixed;inset:0;width:100%;height:100%;z-index:0;pointer-events:none;opacity:0.95;mix-blend-mode:screen}

/* layout */
.container{position:relative;width:100%;height:100%;z-index:1}
.topbar{display:flex;justify-content:space-between;align-items:center;padding:18px 28px;position:absolute;top:0;left:0;right:0;z-index:20}
.controls{display:flex;gap:10px}

/* buttons */
.btn{display:inline-flex;align-items:center;gap:10px;padding:12px 22px;border-radius:999px;border:none;cursor:pointer;background:linear-gradient(90deg,#00a2e1,#008cc7);box-shadow:0 10px 36px rgba(0,20,40,0.45),inset 0 -2px 0 rgba(255,255,255,0.06);color:#fff;font-weight:500}
.btn.small{padding:8px 14px;font-size:.95rem;border-radius:12px}
.btn-ghost{background:transparent;border:1px solid rgba(255,255,255,0.12);padding:8px 12px;border-radius:12px;color:#eaf8ff;backdrop-filter:blur(6px)}
.btn:hover{transform:translateY(-4px);box-shadow:0 16px 48px rgba(0,20,40,0.55)}

/* screens */
.screen{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;padding:80px 40px;visibility:hidden;opacity:0;transition:opacity .35s,visibility .35s}
.screen.active{visibility:visible;opacity:1}

/* welcome */
.welcome-content{text-align:center;max-width:900px}
.welcome-content h1{font-size:2.4rem;font-weight:500;margin-bottom:12px;text-shadow:0 6px 18px rgba(0,0,0,.35)}
.welcome-content p{margin-bottom:18px;opacity:.95;font-size:1.05rem}

/* attract overlay */
.attract-overlay{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;z-index:18;pointer-events:none}
.attract-overlay.hidden{opacity:0;transform:scale(.98);transition:opacity .28s,transform .28s}
.attract-overlay.visible{opacity:1;transform:scale(1);pointer-events:none}

/* attract card */
.attract-card{width:300px;height:420px;border-radius:14px;transform-style:preserve-3d;transition:transform .6s;box-shadow:0 30px 80px rgba(0,0,0,0.6);z-index:18}
.attract-card .card-inner{width:100%;height:100%;position:relative;transform-style:preserve-3d}
.attract-card .card-front,.attract-card .card-back{position:absolute;width:100%;height:100%;backface-visibility:hidden;border-radius:14px;overflow:hidden}
.attract-card .card-back{transform:rotateY(180deg);background:#fff;display:flex;align-items:center;justify-content:center}
.attract-card img{width:100%;height:100%;object-fit:cover}

/* tape */
.tape-viewport{position:absolute;inset:120px 0 80px 0;display:flex;align-items:center;justify-content:flex-start;pointer-events:auto;z-index:10}
.tape{position:relative;width:100%;height:100%;overflow:hidden;pointer-events:auto}

/* thumb style */
.tape .thumb{position:absolute;top:50%;left:0;transform:translateY(-50%);width:160px;height:220px;will-change:transform,opacity;cursor:pointer;transition:transform .22s,opacity .22s}
.tape .thumb .card{width:100%;height:100%;border-radius:12px;overflow:hidden;box-shadow:0 12px 30px rgba(0,0,0,0.45);transform-style:preserve-3d}
.tape .thumb img{width:100%;height:100%;object-fit:cover;display:block}

/* anim wrapper flip styles and fallback */
.anim-wrapper{transform-style:preserve-3d;-webkit-transform-style:preserve-3d;will-change:transform;backface-visibility:hidden;-webkit-backface-visibility:hidden}
.anim-wrapper > div{position:absolute;inset:0;border-radius:12px;overflow:hidden;backface-visibility:hidden;-webkit-backface-visibility:hidden}

/* detail (text-only) positioned dynamically */
.detail-panel{position:fixed;top:50%;transform:translateY(-50%);width:34%;min-width:260px;max-width:480px;background:rgba(8,14,28,.62);border-radius:14px;padding:14px;z-index:1000;box-shadow:0 30px 80px rgba(0,0,0,0.6);backdrop-filter:blur(10px);opacity:0;transition:opacity .22s,transform .22s}
.detail-panel.hidden{pointer-events:none}
.detail-panel.visible{opacity:1;pointer-events:auto}
.detail-content-only{color:#e6f7ff}
.detail-content-only h3{color:#00a2e1;font-size:1.15rem;margin-bottom:8px}
.meaning-section{margin-bottom:10px}
.meaning-section h4{color:#7fd5f7;font-size:.9rem;margin-bottom:6px}
.meaning-section p{font-size:.98rem;line-height:1.45;color:#eaf8ff}

/* responsive tweaks */
@media (max-width:1100px){ .tape .thumb{width:120px;height:170px} .detail-panel{width:46%;min-width:220px} }
@media (max-width:720px){ .tape .thumb{width:96px;height:136px} .detail-panel{display:none} }

/* hide any accidentally included images in panel (safety) */
.detail-panel img{display:none}


