window.ResultScreen = {
    currentCard: 0,
    cardData: [],
    
    show(cards, currentStep, onCompleteCallback) {
        this.cardData = cards.filter(c => c);
        this.currentCard = this.cardData.length - 1;
        this.render(false, currentStep);
        this.updateControls(false);
        
        const slide = document.querySelectorAll('.reveal-slide')[this.currentCard];
        const cardEl = slide.querySelector('.tarot-card');
        const texts = slide.querySelectorAll('.reveal-text');
        
        gsap.fromTo(document.getElementById('reveal-overlay'), { scale: 0.9, opacity: 0 }, { scale: 1, opacity: 1, duration: 0.4, ease: 'power2.out', onStart: () => document.getElementById('reveal-overlay').classList.add('active') });
        
        gsap.to(cardEl, {
            rotationY: 180,
            duration: 0.8,
            ease: 'power2.inOut',
            onComplete: () => {
                texts.forEach((text, index) => {
                    gsap.delayedCall(0.2 + index * 0.6, () => text.classList.add('visible'));
                });
                
                if (currentStep < 2) {
                    document.getElementById('reveal-overlay').onclick = () => {
                        document.getElementById('reveal-overlay').onclick = null;
                        gsap.to(document.getElementById('reveal-overlay'), { scale: 0.9, opacity: 0, duration: 0.4, ease: 'power2.in', onComplete: onCompleteCallback });
                    };
                } else {
                    // –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
                    onCompleteCallback();
                }
            }
        });
    },

    initialize(chosenCards) {
        this.cardData = chosenCards;
        this.currentCard = chosenCards.length - 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        this.render(true);
        this.updateControls(true);

        if (!document.getElementById('reveal-overlay').classList.contains('active')) {
             gsap.fromTo(document.getElementById('reveal-overlay'), { scale: 0.9, opacity: 0 }, { scale: 1, opacity: 1, duration: 0.4, ease: 'power2.out', onStart: () => document.getElementById('reveal-overlay').classList.add('active') });
        }
        
        const finalPrompt = document.getElementById('final-prompt');
        finalPrompt.innerHTML = "–°–º–∞—Ö–Ω–∏—Ç–µ –≤–ø—Ä–∞–≤–æ, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å –û—Ä–∞–∫—É–ª–∞";
        const promptTimeline = gsap.timeline({delay: 2});
        promptTimeline.to(finalPrompt, { opacity: 1, duration: 1 })
                      .to(finalPrompt, { opacity: 0, duration: 1, delay: 3 });
    },

    render(isFinal = false, currentStep = 0) {
        const container = document.getElementById('reveal-container');
        if (!container) return;
        container.innerHTML = ''; 
        const themes = ['challenge-theme', 'path-theme', 'outcome-theme'];
        
        this.cardData.forEach((card, index) => {
            if (!card) return; // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            const prophecyType = themes[index].split('-')[0];
            const theme = themes[index];
            const slide = document.createElement('div');
            slide.className = 'reveal-slide';
            slide.innerHTML = `
                <div class="reveal-slide-content ${theme}">
                    <div class="reveal-image-wrapper">
                        <div class="tarot-card" style="transform: rotateY(${isFinal || index < currentStep ? '180deg' : '0deg'});">
                           <div class="card-face card-back"></div>
                           <div class="card-face card-front" style="background-image: url('${card.image}');"></div>
                        </div>
                    </div>
                    <div class="reveal-text-content">
                        <h2 class="reveal-name reveal-text ${isFinal || index < currentStep || this.cardData.length-1 === index ? 'visible' : ''}">${card.name}</h2>
                        <p class="reveal-keyword reveal-text ${isFinal || index < currentStep || this.cardData.length-1 === index ? 'visible' : ''}">${card.keyword}</p>
                        <p class="reveal-prophecy reveal-text ${isFinal || index < currentStep || this.cardData.length-1 === index ? 'visible' : ''}">${card.prophecy[prophecyType]}</p>
                    </div>
                </div>
            `;
            container.appendChild(slide);
        });

        if (isFinal) {
            const oracleSlide = document.createElement('div');
            oracleSlide.className = 'reveal-slide';
            oracleSlide.innerHTML = `
                <div class="reveal-slide-content ai-theme">
                    <div class="reveal-image-wrapper">
                        <img src="images/oracul.png" alt="AI Oracle" style="width:100%; height:100%; border-radius: 15px; object-fit: cover;">
                    </div>
                    <div class="oracle-slide-content">
                         <h2 class="ai-title">–ì–ª—É–±–∏–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑</h2>
                         <p class="ai-subtitle">–ù–µ–π—Ä–æ—Å–µ—Ç—å –º–æ–∂–µ—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –≥–ª—É–±–∂–µ. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –≤–∞—à–µ–≥–æ IT-—Ä–∞—Å–∫–ª–∞–¥–∞.</p>
                         <button class="ai-action-btn" onclick="ResultScreen.showAI()">–†–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</button>
                    </div>
                </div>
            `;
            container.appendChild(oracleSlide);
        }
    },

    updateControls(isFinal) {
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-reveal-btn');
        const container = document.getElementById('reveal-container');

        if (document.getElementById('final-prompt')) document.getElementById('final-prompt').style.opacity = 0;

        prevBtn.style.display = isFinal ? 'block' : 'none';
        nextBtn.style.display = isFinal ? 'block' : 'none';
        closeBtn.style.display = isFinal ? 'block' : 'none';

        if (isFinal) {
            prevBtn.disabled = this.currentCard === 0;
            nextBtn.disabled = this.currentCard === this.cardData.length;
        }
        container.style.transform = `translateX(-${this.currentCard * 100}%)`;
    },
    
    setupEventListeners() {
        document.getElementById('close-reveal-btn').onclick = () => {
            gsap.to(document.getElementById('reveal-overlay'), { scale: 0.9, opacity: 0, duration: 0.4, ease: 'power2.in', onComplete: () => {
                document.getElementById('reveal-overlay').classList.remove('active');
                if (typeof Navigation !== 'undefined') {
                    Navigation.switchScreen('start'); 
                } else {
                    document.body.innerHTML = '<h1 style="color: white; text-align: center; margin-top: 50px;">–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</h1>';
                }
            }});
        };
        document.getElementById('prev-btn').onclick = () => this.prevCard();
        document.getElementById('next-btn').onclick = () => this.nextCard();
    },
    
    nextCard() { if (this.currentCard < this.cardData.length) { this.currentCard++; this.updateControls(true); } },
    prevCard() { if (this.currentCard > 0) { this.currentCard--; this.updateControls(true); } },

    showAI() { document.getElementById('ai-overlay').classList.add('active'); },
    hideAI() { document.getElementById('ai-overlay').classList.remove('active'); },
    
    async requestAI() {
        const apiKey = "AIzaSyCmqT_oPvpqYKgRxU8LItCuFZY0NY3ulu8";
        const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
        const question = document.getElementById('ai-question').value;
        const responseEl = document.getElementById('ai-response');
        const btn = document.querySelector('#ai-overlay .ai-btn');
        const btnText = document.getElementById('ai-btn-text');
        if (!question.trim()){ alert("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."); return; }
        btn.disabled = true;
        btnText.textContent = '–ê–Ω–∞–ª–∏–∑...';
        responseEl.classList.add('visible');
        responseEl.innerHTML = `<em style="color: var(--ai-color);">üîÆ –°–æ–µ–¥–∏–Ω—è—é—Å—å —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –ø–æ—Ç–æ–∫–æ–º...</em>`;
        const cardDataSource = this.cardData;
        if (!cardDataSource || cardDataSource.length < 3 || cardDataSource.some(c => !c)) {
             responseEl.innerHTML = `<span style="color: #ff8a80;">–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ.</span>`;
             btn.disabled = false; btnText.textContent = '–°–ø—Ä–æ—Å–∏—Ç—å'; return;
        }
        const prompt = `
            –¢—ã - —Ü–∏—Ñ—Ä–æ–≤–æ–π –æ—Ä–∞–∫—É–ª, IT-—Ç–∞—Ä–æ–ª–æ–≥. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç –¢–∞—Ä–æ.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –≥–ª—É–±–æ–∫—É—é, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
            –í–æ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∞:
            1.  **–í—ã–∑–æ–≤ (Challenge):** –ö–∞—Ä—Ç–∞ "${cardDataSource[0].name}".
            2.  **–ü—É—Ç—å (Path):** –ö–∞—Ä—Ç–∞ "${cardDataSource[1].name}".
            3.  **–ò—Å—Ö–æ–¥ (Outcome):** –ö–∞—Ä—Ç–∞ "${cardDataSource[2].name}".
            –ê –≤–æ—Ç –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${question}"
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏–Ω–µ—Ä–≥–∏—é —ç—Ç–∏—Ö —Ç—Ä–µ—Ö –∫–∞—Ä—Ç –∏ –¥–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑—ã–≤–∞—è –µ–≥–æ —Å –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ–π.
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –æ–±—â–µ–≥–æ –≤—ã–≤–æ–¥–∞, –∞ –∑–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–æ –ø–æ—è—Å–Ω–∏ —Ä–æ–ª—å –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞.
            –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –º—É–¥—Ä—ã–π, –Ω–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π IT-–ø—Ä–æ—Ä–æ–∫. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ –¥–∞–ª, –∞ —Ç–æ–ª—å–∫–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è.`;
        try {
            const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }) });
            if (!response.ok) { const errorData = await response.json(); throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`); }
            const data = await response.json();
            if (data.candidates && data.candidates.length > 0 && data.candidates[0].content.parts[0].text) {
                const text = data.candidates[0].content.parts[0].text;
                responseEl.innerHTML = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\n/g, '<br>');
            } else { throw new Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."); }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API:", error);
            responseEl.innerHTML = `<span style="color: #ff8a80;">–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ü–∏—Ñ—Ä–æ–≤—ã–µ –¥—É—Ö–∏ –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –û—à–∏–±–∫–∞: ${error.message}</span>`;
        } finally {
            btn.disabled = false; btnText.textContent = '–°–ø—Ä–æ—Å–∏—Ç—å';
        }
    }
};

ResultScreen.setupEventListeners();